1) Kotlin runs on the JVM. It is a JVM language. Just like any normal java file class it get compile into class byte
   code after that Kotlin runtime Jar get add in it and generate the output.

2) val cannot be reassigned and var is re-assignable. val work as a constant.

3) Type inference : is when you create a variable without mentioning the data type
   e.g val msg = "vishal"
   ctrl+shift+p   : to view the data type

   to provide the data type while creation : val score: Int = 12

4) Ranges in kotlin: 1..4 --> 1 to 5 including 5
   until keyword :  1 until 5 : excluding upper bound

5) When is Switch case in java
        in the case of when you can also pass the logic

6) Function syntax:
        fun add(num1 : Int, num2 : Int) : Int {

        }

        Default value of function parameter are allowed in kotlin.

        Named Arguments : is when you are passing argument to function call in any order by mentioning the name of the variable.

        You can also store function in variable

6) kotlin doesn't have primitive data type.

7) While creating object of a class if there is init() blocks present in class they get executed first before constructor{...} block
   Rule in kotlin for constructor:
    Whenever you declare a secondary constructor using constructor{...} keyword you have to call the primary constructor using this()
    primary constructor is the one with class name
    You can make the secondary constructor as primary constructor by removing the parenthesis in front of the class name

8) To reduce the run time error in kotlin you have to initialize property (variable).
    -> but sometime you have to initialize the property later in that case you can declare your property with lateinit variable.
    lateinit have some rule that it can't be val type and can't work with int float double

9) Kotlin default syntax for getter and setter
    e.g -->
            lateinit var name:String
            set(value) {
                field = value
            }
            get() = field      //can you return in getter with curly bracket code block

10) to inherit the base class you need to declare the open keyword in_front of the base class
     same like java kotlin doesn't support multiple inheritance

11) In kotlin the super class of all class is Any

12) Abstract method and classes are same as java

13) Java --> instanceOf    ====    Kotlin --> is

14) In Kotlin, there are several ways to create arrays, including:

    Using the arrayOf() function: This function creates an array of objects with the specified values. For example, val numbers = arrayOf(1, 2, 3, 4, 5) creates an array of integers with the values 1, 2, 3, 4, and 5.

    Using the arrayOfNulls() function: This function creates an array of the specified size with null values. For example, val strings = arrayOfNulls<String>(5) creates an array of 5 strings with null values.

    Using the Array() constructor: This constructor creates an array of the specified size and initializes its values using a lambda expression. For example, val squares = Array(5) { i -> i * i } creates an array of 5 integers containing the squares of the numbers from 0 to 4.

    Using the IntArray(), DoubleArray(), and other similar functions: These functions create arrays of the specified type and size with default values. For example, val numbers = IntArray(5) creates an array of 5 integers with default values of 0.

    Using the toTypedArray() function: This function converts a collection to an array. For example, val list = listOf("a", "b", "c") and val array = list.toTypedArray() creates an array of strings containing the values "a", "b", and "c".

    Using range and step syntax to create arrays: This syntax can be used to create arrays with sequential or patterned values. For example, val evenNumbers = (2..10 step 2).toList().toTypedArray() creates an array of even numbers from 2 to 10.


15) if there is no class name declaration level constructor and class contain init() and constructor() block then init block get executed first

16) "as" is used for type casting e.g templateView as POBNativeTemplateView

17) by default everything in kotlin is public

18) Internal means it is only available within the module not like public which accessible from everywhere
    use of "protected" keyword is only allowed in classes.

19) In kotlin you can directly create object by with the help of "object" keyword instead of "class".

20) Kotlin doesn't contain static keyword

21) companion object declared within classes helps us to create inner static class and static function
    to be able to use kotlin static keyword in java you need to declare them annotation as @JVMStatic

23) Data classes are like normal classes with data keyword infront of them while declaration
    they have standard overridden toString and equals method (normaly equal method focus on hashcode but in case of data class it focus on
    data within the class.

24) to make data type null means to be able to assign null to a data type you need to declare them with ? sign
    val name:String ?= null

25) without inner keyword in-front of the nested class , the inner class is accessible without creating the object of outer class

26)
